# Generated by Django 4.0.5 on 2022-06-08 14:51

import django.db.models.deletion
from django.conf import settings
from django.db import migrations, models

import core.models


class Migration(migrations.Migration):

    replaces = [('core', '0001_initial'), ('core', '0002_remove_build_processed'), ('core', '0003_auto_20201121_0555'), ('core', '0004_auto_20210215_0804'), ('core', '0005_auto_20210428_0745'), ('core', '0006_auto_20210430_1258'), ('core', '0007_auto_20210517_1142'), ('core', '0008_build_backed_up'), ('core', '0009_auto_20210526_0557'), ('core', '0010_auto_20210526_0616'), ('core', '0011_alter_mirrorserver_options'), ('core', '0012_auto_20210526_0623'), ('core', '0013_auto_20210526_0625'), ('core', '0014_auto_20210526_0642'), ('core', '0015_alter_mirrorserver_download_url_base'), ('core', '0016_alter_mirrorserver_download_url_base'), ('core', '0017_mirrorserver_description'), ('core', '0018_mirrorserver_priority'), ('core', '0019_alter_mirrorserver_priority'), ('core', '0020_build_enabled'), ('core', '0021_build_download_count'), ('core', '0022_statistics'), ('core', '0023_alter_statistics_options'), ('core', '0024_alter_build_size'), ('core', '0025_alter_build_mirrored_on'), ('core', '0026_build_build_date'), ('core', '0027_mirrorserver_target_versions'), ('core', '0028_alter_mirrorserver_target_versions'), ('core', '0029_alter_mirrorserver_target_versions'), ('core', '0030_alter_mirrorserver_target_versions'), ('core', '0031_alter_build_variant'), ('core', '0032_delete_statistics'), ('core', '0033_remove_build_download_count'), ('core', '0034_statistics'), ('core', '0035_remove_build_md5_file'), ('core', '0036_build_md5sum'), ('core', '0037_alter_device_codename'), ('core', '0038_alter_statistics_options')]

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='Device',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.TextField(help_text="Example: 'Nexus 5X', 'Nexus 6P'", max_length=100)),
                ('codename', models.TextField(help_text="Example: 'bullhead', 'angler'", max_length=20, unique=True)),
                ('manufacturer', models.TextField(help_text="Example: 'LG', 'Huawei'", max_length=20)),
                ('photo', models.URLField(blank=True, help_text='URL to image of device.<br>Preferably grab an image from <a href="https://www.gsmarena.com" target="_blank">GSMArena.</a><br>Example: \'https://fdn2.gsmarena.com/vv/bigpic/lg-nexus-5x-.jpg\', \'https://fdn2.gsmarena.com/vv/bigpic/huawei-nexus-6p-.jpg\'')),
                ('status', models.BooleanField(default=True, help_text='Device is still maintained - uncheck if abandoned')),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('maintainers', models.ManyToManyField(blank=True, help_text='Choose the maintainers working on this device. Multiple maintainers can be selected.<br>', related_name='devices', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='MirrorServer',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.TextField(help_text='Name that describes the server.<br>Example: SourceForge, Mirror A, etc.', max_length=100)),
                ('hostname', models.TextField(help_text='Hostname of the server.<br>Example: frs.sourceforge.net, mirror.example.com, etc.', max_length=100)),
                ('ssh_username', models.TextField(help_text='SSH username to connect with', max_length=50, verbose_name='SSH username')),
                ('ssh_keyfile', models.TextField(help_text='SSH keyfile to connect with. Note that the SSH keyfiles must be placed in the ./ssh/ directory defined in the docker-compose file.<br>Example: ssh_key, id_rsa, etc.', max_length=100, verbose_name='SSH keyfile')),
                ('upload_path', models.TextField(help_text='Path to upload to on the server.<br>Example: /home/frs/project/example/R/, /mnt/media/mirror/src/target/R/, etc.', max_length=100)),
                ('enabled', models.BooleanField(default=True, help_text='Whether this mirror instance is enabled or not. If disabled, builds will not be mirrored until the mirror instance is enabled again and a background refresh task runs.')),
                ('ssh_host_fingerprint', models.TextField(help_text='SSH host fingerprint. Get this with <code>ssh-keyscan hostname</code>.', max_length=1000, verbose_name='SSH host fingerprint')),
                ('ssh_host_fingerprint_type', models.TextField(help_text='SSH host fingerprint type. Get this with <code>ssh-keyscan hostname</code>.<br>Example: ssh-rsa, etc.', max_length=20, verbose_name='SSH host fingerprint type')),
                ('download_url_base', models.TextField(blank=True, help_text='Base of downloads URL, should a download URL exist.<br>Example: if full URL to download is https://sourceforge.net/projects/demo/files/Q/sunfish/Bliss-v14.2-sunfish-OFFICIAL-gapps-20210425.zip/download, then the base URL is https://sourceforge.net/projects/demo/files/Q/{}/download', max_length=100, verbose_name='Download URL base')),
                ('downloadable', models.BooleanField(default=False, help_text='Whether downloads from this mirror instance is possible or not. If disabled, this mirror will not be shown to users in the mirror list. Make sure to set the URL base field above if you enable this option!')),
                ('description', models.TextField(blank=True, help_text='Description of the server. This is shown to the users on the mirror page.', max_length=100)),
                ('priority', models.IntegerField(default=10, help_text='Sets the priority of the mirror in the mirror list. Lower values will be listed first, and higher values will be listed last.<br>Note: the main server does not have a priority value and will always be the first in the mirror list.')),
                ('target_versions', models.TextField(blank=True, help_text='Build versions to mirror to this server. Specify multiple versions on each line.<br>Wildcards are supported with the "*" character.<br>Example: *, v12.*, v12.5, ...', max_length=100, verbose_name='Target versions')),
            ],
            options={
                'verbose_name': 'mirror server',
                'verbose_name_plural': 'mirror servers',
            },
        ),
        migrations.CreateModel(
            name='Build',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('file_name', models.TextField(help_text="Example: 'Bliss-v14-bullhead-OFFICIAL-gapps-20200608", max_length=500, unique=True)),
                ('size', models.BigIntegerField(help_text='Size of zip file in bytes<br>Example: 857483855')),
                ('version', models.TextField(help_text='Example: v12.8', max_length=20)),
                ('md5sum', models.TextField(max_length=32, verbose_name='MD5 hash')),
                ('sha256sum', models.TextField(max_length=64, verbose_name='SHA256 hash')),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('zip_file', models.FileField(unique=True, upload_to=core.models.Build.get_upload_path, verbose_name='Zip file')),
                ('device', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='builds', to='core.device')),
                ('variant', models.TextField(help_text='Variant of the build. Allowed values are set in the server configuration.', max_length=20)),
                ('mirrored_on', models.ManyToManyField(blank=True, help_text='Servers this build is mirrored on. Do NOT edit manually.<br>Incorrectly modifying this field may result in mirror servers showing for a given build, even if the build is not mirrored on said mirror server.', related_name='builds', to='core.mirrorserver')),
                ('enabled', models.BooleanField(default=True, help_text='Whether this build is enabled or not. Disabled builds will not show up to users, or in the updater API until it is enabled again. Disabled builds are still replicated to mirror servers, so a user downloading from a mirror server may see the build listed.')),
                ('build_date', models.DateField(help_text='Build date')),
            ],
        ),
        migrations.CreateModel(
            name='Statistics',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('time', models.DateTimeField(auto_now_add=True)),
                ('ip', models.GenericIPAddressField(unpack_ipv4=True)),
                ('build', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='build_stats', to='core.build')),
                ('device', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='device_stats', to='core.device')),
            ],
            options={
                'verbose_name': 'statistic',
                'verbose_name_plural': 'statistics',
            },
        ),
    ]
